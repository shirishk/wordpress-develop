def label = "mypod-${UUID.randomUUID().toString()}"
// Create pod template using desired image.
podTemplate(label: label, containers: [
    containerTemplate(name: 'jnlp', image: '10.21.236.86:5000/jnlp-slave', alwaysPullImage: true, args: '${computer.jnlpmac} ${computer.name}', workingDir: '/home/jenkins/dev-jenkins/'+env.BUILD_NUMBER),
    containerTemplate(name: 'buildubuntu', image: '10.21.236.86:5000/build-kernel', alwaysPullImage: true, resourceRequestCpu: '600m', resourceLimitCpu: '6000m', resourceRequestMemory: '1024Mi', resourceLimitMemory: '10240Mi', workingDir: '/home/jenkins/dev-jenkins/'+env.BUILD_NUMBER,  ttyEnabled: true, command: 'cat')
    ], 
    volumes: [
    persistentVolumeClaim(mountPath: '/home/jenkins/dev-jenkins', claimName: 'dev-jenkins', readOnly: false)
    ],
    imagePullSecrets: [ 'myregistrykey' ])
   
    {
    node(label) {
        try {
            container('buildubuntu'){
                
                stage('Clone Repository') {
                    git branch: 'develop', credentialsId: 'c6b91c57-99d6-4068-a1ad-566f51a7a782', url: 'http://10.21.236.87:8080/root/ubuntu-xenial.git'
                }
                
                stage('Build Project') {
                    sh 'fakeroot debian/rules clean'
                    sh 'fakeroot debian/rules binary-headers binary-generic binary-perarch'
                }
                
                // Create tar.gz package
                stage('Create Package') {
                    sh 'ls ../'
                    sh "tar -czvf kern-package.tar.gz ../*.deb"
                }
                
                // Upload to nexus
                stage('Add To Nexus Artifactory') {
                    nexusArtifactUploader artifacts: [[artifactId: 'UK-ArtifactId', classifier: 'UK-Classifier', file: 'kern-package.tar.gz', type: 'tar.gz']], credentialsId: 'a9cf35a2-766b-44b1-8c81-24b20ca0faa6', groupId: 'UK-GroupId', nexusUrl: '10.21.236.86', nexusVersion: 'nexus3', protocol: 'http', repository: 'kernel', version: 'UK-Version-'+env.BUILD_NUMBER
                }
            }
        
        } catch (e) {
            stage('Create Jira ticket on failure') {
                withEnv(['JIRA_SITE=JIRA']) {
                    def testIssue = [fields: [ project: [key: 'WOR'],
                        summary: 'Issue Created from Jenkins Job - '+env.JOB_NAME+' Build # '+ env.BUILD_NUMBER,
                        description: e,
                        issuetype: [name: 'Bug']]]
                    response = jiraNewIssue issue: testIssue
                    echo response.successful.toString()
                    echo response.data.toString()
                }
                
            }
        }
    }
  }    
